package com.xtase.websocket;

import java.io.*;
import java.net.*;
import java.util.*;
import java.util.regex.*;

/*

try to send that directly (w/o frames)


WSS> < ls /sdcard-ext/vm_mnt/www
0x81 0x9B 0x94 0x63 0x15 0xF8 0xF8 0x10 0x35 0xD7 0xE7 0x07 0x76 0x99 0xE6 0x07 0x38 0x9D 0xEC 0x17 0x3A 0x8E 0xF9 0x3C 0x78 0x96 0xE0 0x4C 0x62 0x8F 0xE3 0x6E 0x1F 
0x81 0xFE 0x57 0x62 0xC9 0xD6 0x4C 0x39 0xF8 0xED 0x64 0x56 0xA4 0x89 0x34 0x03 0xA7 0xA0 0x36 0x11 0xD2 0x8D 0x67 0x0F 0xE9 0xF6 0x77 0x42 0xE9 0xF6 0x77 0x42 0xE9 0xCD 0x0C 0x53 0xF2 0xE5 0x63 0x0F 0xAA 0xA5 0x24 0x79 0x92 0xE6 0x3A 0x42 0xE9 0xF6 0x77 0x42 0xE9 0xF6 0x77 0x42 0xE9 0xF6 0x77 0x42 0xD2 0x8D 0x66 0x59 0xFA 0xE4 0x3A 0x05 0xAC 0xA2 0x1E 0x32 0xE7 0xA5 0x3D 0x11 0xD2 0x8D 0x67 0x0F 0xE9 0xF6 0x77 0x42 0xE9 0xF6 0x77 0x79 0x92 0xE7 0x6C 0x51 0xFD 0xBB 0x3B 0x0B 0xBF 0xB3 0x21 0x0B 0xAC 0xA1 0x4C 0x39 0xF9 0xBB 0x77 0x42 0xE9 0xF6 0x77 0x42 0xE9 0xF6 0x4C 0x39 0xF8 0xED 0x64 0x50 0xA4 0xA5 0x32 0x16 0x80 0x86 0x79 0x11 0xA3 0xA5 0x4C 0x39 
0x81 0x84 0x01 0xA1 0xAF 0x79 0x31 0xCC 0xA2 0x73 
0x81 0xFC 0x0D 0xEA 0xBE 0xD3 0x16 0xB1 0x8F 0xE8 0x3E 0xDE 0xD3 0x8C 0x7E 0x93 0xD0 0xB2 0x7D 0x99 0xDB 0xC8 0x56 0xDA 0xD3 0xF3 0x2D 0xCA 0x9E 0xF3 0x2D 0xCA 0x9E 0xC8 0x56 0xDB 0x85 0xE0 0x39 0x87 0xDA 0xB6 0x60 0x85 0xA5 0x88 0x3D 0x87 0x9E 0xF3 0x2D 0xCA 0x9E 0xF3 0x2D 0xCA 0x9E 0xF3 0x2D 0xCA 0xA5 0x88 0x3C 0xD1 0x8D 0xE1 0x60 0x83 0xD0 0xB7 0x68 0x92 0x90 0xA0 0x67 0x99 0xA5 0x88 0x3D 0x87 0x9E 0xF3 0x2D 0xCA 0x9E 0xF3 0x2D 0xF1 0xE5 0xE2 0x36 0xD9 0x8A 0xBE 0x7D 0x98 0xD1 0xB9 0x68 0x89 0xCA 0xBE 0x6C 0x84 0xDF 0xB4 0x68 0x98 0xA5 0x88 0x3D 0x87 0x9E 0xF3 0x16 0xB1 0x8F 0xE8 0x3E 0xDE 0xD3 0xA7 0x60 0x9A 0xA5 0x88 0x3D 0x87 0xB3 0xD9 
0x81 0xE4 0x84 0x92 0xB8 0x04 0x9F 0xC9 0x89 0x3F 0xB7 0xA6 0xD5 0x65 0xF4 0xE2 0xA3 0x5F 0xB4 0xFF 0x98 0x24 0xA4 0xB2 0x98 0x24 0xA4 0xB2 0x98 0x24 0xA4 0xB2 0x98 0x1F 0xDF 0xA3 0x83 0x37 0xB0 0xFF 0xDC 0x61 0xF7 0xF9 0xA3 0x5F 0xB4 0xFF 0x98 0x24 0xA4 0xB2 0x98 0x24 0xA4 0xB2 0x98 0x24 0xA4 0xB2 0xA3 0x5F 0xB5 0xA9 0x8B 0x30 0xE9 0xF8 0xCB 0x70 0xE1 0xE0 0xD5 0x1F 0xDF 0xA2 0xD5 0x24 0xA4 0xB2 0x98 0x24 0xA4 0xB2 0x98 0x24 0xA4 0x89 0xE3 0x35 0xBF 0xA1 0x8C 0x69 0xF4 0xE7 0xDA 0x68 0xED 0xF1 0xA3 0x5F 0xB4 0xFF 0xB5 0x0E 
0x81 0xE6 0xB5 0xB3 0x94 0x19 0xAE 0xE8 0xA5 0x22 0x86 0x81 0xF9 0x78 0xC1 0xC1 0xFD 0x61 0x9B 0xC0 0xFE 0x6A 0xAE 0xE8 0xA4 0x74 0x95 0x93 0xB4 0x39 0x95 0x93 0xB4 0x02 0xEE 0x82 0xAF 0x2A 0x81 0xDE 0xF0 0x7C 0xC6 0xD8 0xA6 0x02 0xEE 0x83 0xF9 0x39 0x95 0x93 0xB4 0x39 0x95 0x93 0xB4 0x39 0x95 0x93 0x8F 0x42 0x84 0x88 0xA7 0x2D 0xD8 0xDF 0xFD 0x7B 0xC6 0xA8 0xCF 0x29 0xD8 0x93 0xB4 0x39 0x95 0x93 0xB4 0x39 0x95 0x93 0xB4 0x39 0x95 0xA8 0xCF 0x28 0x8E 0x80 0xA0 0x74 0xC6 0xD6 0xE6 0x6F 0xDC 0xD0 0xF1 0x6A 0xAE 0xE8 0xA4 0x74 0xB8 0xB9 
0x81 0x82 0x06 0x2E 0xFE 0x0D 0x22 0x0E 

*/
  
public class SimpleTelnetServer {
  
  public SimpleTelnetServer(){}
  
  static int sskPort = 1025; 
  
  public static void main(String[] args) throws Exception {
    _("Starting telnet server "+sskPort);
    new SimpleTelnetServer().start();
  }
  
  // "0x81 0x9B 0x94 ...."
  public int[] decodeFrame(String line) {
    int len = line.length() / 5;
    int[] result = new int[ len ];
    
    for(int i=0; i < len; i++) {
      int start = (i*5)+2;
      String hex = line.substring( start, start+2 );
      int dec = Integer.parseInt( hex, 16 );
      result[i] = dec;
    }
    
    return result;
  }
                                 
   // TODO : multiThread multiClient                               
  public void start() throws Exception {
    ServerSocket ssk = new ServerSocket(sskPort);
                                 
   while( !new File("halt").exists() ) {
     Socket sk = null;
     try {              
       _("accepting");
       sk = ssk.accept();
       _("accepted");
      
       BufferedReader reader = new BufferedReader( new InputStreamReader( sk.getInputStream() ) );
       PrintStream ps = new PrintStream( sk.getOutputStream() );  
         
       ps.println("Hello You");
       String cmd = null;
       while( (cmd = reader.readLine() ) != null) {
         ps.println("You said : '"+ cmd +"'");                          
         _("> '"+ cmd +"'");
         if ( cmd.trim().equals("exit") || cmd.trim().equals("quit") ) {
           ps.println("Bye !");                          
           _("> Bye!");
           break;
         } else if ( cmd.trim().equals("test") ) {
           //ps.print("1234");             
           //String line = "0x81 0x9B 0x94 0x63 0x15 0xF8 0xF8 0x10 0x35 0xD7 0xE7 0x07 0x76 0x99 0xE6 0x07 0x38 0x9D 0xEC 0x17 0x3A 0x8E 0xF9 0x3C 0x78 0x96 0xE0 0x4C 0x62 0x8F 0xE3 0x6E 0x1F ";
           String line = "0x81 0xFE 0x57 0x62 0xC9 0xD6 0x4C 0x39 0xF8 0xED 0x64 0x56 0xA4 0x89 0x34 0x03 0xA7 0xA0 0x36 0x11 0xD2 0x8D 0x67 0x0F 0xE9 0xF6 0x77 0x42 0xE9 0xF6 0x77 0x42 0xE9 0xCD 0x0C 0x53 0xF2 0xE5 0x63 0x0F 0xAA 0xA5 0x24 0x79 0x92 0xE6 0x3A 0x42 0xE9 0xF6 0x77 0x42 0xE9 0xF6 0x77 0x42 0xE9 0xF6 0x77 0x42 0xD2 0x8D 0x66 0x59 0xFA 0xE4 0x3A 0x05 0xAC 0xA2 0x1E 0x32 0xE7 0xA5 0x3D 0x11 0xD2 0x8D 0x67 0x0F 0xE9 0xF6 0x77 0x42 0xE9 0xF6 0x77 0x79 0x92 0xE7 0x6C 0x51 0xFD 0xBB 0x3B 0x0B 0xBF 0xB3 0x21 0x0B 0xAC 0xA1 0x4C 0x39 0xF9 0xBB 0x77 0x42 0xE9 0xF6 0x77 0x42 0xE9 0xF6 0x4C 0x39 0xF8 0xED 0x64 0x50 0xA4 0xA5 0x32 0x16 0x80 0x86 0x79 0x11 0xA3 0xA5 0x4C 0x39 ";
           int[] trame = decodeFrame(line);
           for(int i=0; i < trame.length; i++) {
               ps.write(trame[i]);
               System.out.print(trame[i]+" ");
           }
           System.out.println();
           ps.flush();
         }
       }                          
      _("quit");
  
     } catch(Exception ex) {
       ex.printStackTrace();
     } finally {
       try { sk.close(); } catch(Exception ex) {}
     }
    }
    try { ssk.close(); } catch(Exception ex) {}
    _("Halting");
  }
    
 static String cat(String filename) throws Exception {
   File f = new File(filename);
   if ( !f.exists() ) { throw new FileNotFoundException(filename); }
   String result = "";
   BufferedReader reader = new BufferedReader( new FileReader(f));
   String line;
   while( (line = reader.readLine()) != null ) {
     result += line +"\n";
   }
   reader.close();
 return result;
 }
                                 
 static void _(Object o) { System.out.println("TNS> "+o); }                          
 static void dodo(long milis) { try { Thread.sleep(milis); } catch(Exception ex) {} }                                  
    
                                 
  public static String replaceBy(String str, String oldE, String newE) {
		if (str.indexOf(oldE) == -1)
			return (str); // 1ere mesure a prendre pour ne pas parcourir tt le
							// tableau inutilement

		String regularExpression = Pattern.quote(oldE);
		String replacement = Matcher.quoteReplacement(newE);

		String retBuffer = str.replaceAll(regularExpression, replacement);
    return retBuffer;                             
  }
                                 
}

  
